# 튜플 : 한번 만들고 나면 병경할 수 없는 집합
# 리스트는 대괄호[]로 생성하고 튜플은 소괄호()로 생성, 딕셔너리는 중괄로{}로 생성
# 튜플은 값을 수정할 수 없으며 읽기만 가능

mytuple=(1,2,3)
print(type(mytuple))    # 데이터 형식 출력
print(mytuple)          # 튜플 전제 출력
print(mytuple[1])       # 튜플과 리스트의 공통점:인덱스로 값을 불러올 수 있음
#mytuple[1]=20          # 튜플은 값을 수정할 수 없다

mytuple1=1,2,3 # 튜플은 일반적으로 소괄호() 없어도 됨. 보다 명확하기 위해 소괄호 권장
print(type(mytuple1))
print(mytuple1)

mytuple2=(1,) # 튜플의 요소가 하나밖에 없을 떄는 반드시 콤마(,)를 넣어줘야 함
print(type(mytuple2))

# 딕셔너리 : 인덱스가 아닌 키로 값을 지정
# 리스트의 인덱스 대신 키 사용, 딕셔너리는 키를 이용하여 값을 찾아낼 떄 편리
# 딕셔너리는 리스트와 달리 값을 순서를 지켜주지 않는다.

# 학생 정보의 리스트 표현
student1=[20,'홍길동','빅데이터']
print(student1[0])

# 학생 정보의 딕셔너리 표현
student2={'학번':20,'이름':'홍길동','전공':'빅데이터'}
print(student2['학번'])     # 딕셔너리는 키를 이용하여 출력
#print(student2[1])         # 인덱스로 호출시 에러

# 딕셔너리에 값 추가
print(student2)
student2['연락처'] = '010-123-4567' # 새로운 키와 값 대입 : 새로운 키가 마지막에 추가      
print(student2)
student2['연락처'] = '010-123-0000' # 기존의 키에 값 대립 : 기존 키 값 변경

student2.pop('전공') # pop() 함수로 딕셔너리의 특정키의 값 삭제

